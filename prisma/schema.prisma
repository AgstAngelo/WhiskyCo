generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id  @default(uuid())  @db.Char(36)
  email           String    @unique  @db.VarChar(100)
  name            String    @db.VarChar(100)
  password        String    @db.VarChar(255)
  cpf             String    @unique  @db.VarChar(11)
  phone           String    @unique  @db.VarChar(11)
  isAdmin         Boolean   @db.Bit(1)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user_addresses  Address[]
  user_orders     Order[]
  user_access     Refresh?

  @@map("users")
}

model Refresh {
  id           String  @id  @default(uuid())  @db.Char(36)
  jwt_id       String  @default(uuid())  @db.Char(36)

  user_access  User    @relation(fields: [user_id], references: [id])
  user_id      String  @unique

  expiresIn    String  @db.TinyText

  @@map("refresh")
}

model Product {
  id           String    @id  @default(uuid())  @db.Char(36)
  name         String    @unique  @db.VarChar(100)
  pictures     Json?     @db.Json
  price        Float     @db.Float
  description  String?   @db.Text
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  products     Order_item[]

  category     Category  @relation(fields: [category_id], references: [id])
  category_id  String    @db.Char(36)

  brand        Brand     @relation(fields: [brand_id], references: [id])
  brand_id     String    @db.Char(36)

  @@map("products")
}

model Order {
  id             String    @id  @default(uuid())  @db.Char(36)
  amount         Float     @db.Float
  payment        Payment   @default(DEBITO)
  status         Status    @default(ANALISE)
  dividedIn      Int?      @db.TinyInt
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  ordered_items  Order_item[]

  user           User    @relation(fields: [user_id], references: [id])
  user_id        String  @db.Char(36)

  @@map("orders")
}

enum Status {
  ANALISE
  ENVIADO
  ENTREGUE
  CANCELADO
}

enum Payment {
  DEBITO
  CREDITO
  PIX
  BOLETO
}

model Order_item {
  id          String     @id  @default(uuid())  @db.Char(36)
  quantity    Int        @db.SmallInt

  order       Order      @relation(fields: [order_id], references: [id])
  order_id    String     @db.Char(36)

  product     Product  @relation(fields: [product_id], references: [id])
  product_id  String   @db.Char(36)

  @@map("order_items")
}

model Category {
  id           String   @id  @default(uuid())  @db.Char(36)
  name         String   @unique  @db.VarChar(50)
  description  String?  @db.Text
  
  products     Product[]

  @@map("categories")
}

model Brand {
  id           String   @id  @default(uuid())  @db.Char(36)
  name         String   @unique  @db.VarChar(50)
  description  String?  @db.Text
  
  products     Product[]

  @@map("brands")
}

model Address {
  id            String   @id  @default(uuid())  @db.Char(36)
  CEP           String   @db.VarChar(7)
  Street        String   @db.VarChar(100)
  number        String   @db.VarChar(10)
  complement    String?  @db.VarChar(100)
  main_address  Boolean  @db.Bit(1)

  user        User       @relation(fields: [user_id], references: [id])
  user_id     String     @db.Char(36)

  @@map("addresses")
}