generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id  @default(uuid())  @db.Char(36)
  email           String   @db.VarChar(100)
  name            String   @db.VarChar(100)
  password        String   @db.VarChar(255)
  cpf             String   @db.VarChar(11)
  phone           String   @db.VarChar(11)
  isAdmin         Boolean  @db.Bit(1)
  isLogged        String?  @db.VarChar(255)
  
  user_addresses  Address[]
  user_orders     Order[]

  @@unique([email, cpf])
  @@map("users")
}

model Product {
  id           String    @id  @default(uuid())  @db.Char(36)
  name         String    @db.VarChar(100)
  pictures     Json?     @db.Json
  price        Float     @db.Float
  description  String?   @db.Text
  
  category     Category  @relation(fields: [category_id], references: [id])
  category_id  String

  brand        Brand     @relation(fields: [brand_id], references: [id])
  brand_id     String

  @@unique([name, price])

  @@map("products")
}

model Order {
  id         String   @id  @default(uuid())  @db.Char(36)
  purchase   Json     @db.Json
  amount     Float    @db.Float
  payment    Payment  @default(DEBITO)
  dividedIn  Int?     @db.TinyInt

  user  User  @relation(fields: [order_id], references: [id])
  order_id    String

  @@map("orders")
}

enum Payment {
  DEBITO
  CREDITO
  PIX
  BOLETO
}

model Category {
  id           String   @id  @default(uuid())  @db.Char(36)
  name         String   @unique  @db.VarChar(50)
  description  String?  @db.Text
  
  products     Product[]

  @@map("categories")
}

model Brand {
  id           String   @id  @default(uuid())  @db.Char(36)
  name         String   @unique  @db.VarChar(50)
  description  String?  @db.Text
  
  products     Product[]

  @@map("brands")
}

model Address {
  id            String   @id  @default(uuid())  @db.Char(36)
  CEP           String   @db.VarChar(7)
  Street        String   @db.VarChar(100)
  number        String   @db.VarChar(10)
  complement    String?  @db.VarChar(100)
  main_address  Boolean  @db.Bit(1)

  user        User      @relation(fields: [user_id], references: [id])
  user_id     String

  @@map("addresses")
}